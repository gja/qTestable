/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -v -c QTestableProxy -p QTestableProxy.h:QTestableProxy.cpp /usr/share/dbus-1/interfaces/org.qTestable.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QTESTABLEPROXY_H_1300501407
#define QTESTABLEPROXY_H_1300501407

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.qTestable
 */
class QTestableProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.qTestable"; }

public:
    QTestableProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~QTestableProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> Automate(const QString &request)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(request);
        return asyncCallWithArgumentList(QLatin1String("Automate"), argumentList);
    }

    inline QDBusPendingReply<bool> IsEnabled()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("IsEnabled"), argumentList);
    }

    inline QDBusPendingReply<QStringList> RegisteredClasses()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("RegisteredClasses"), argumentList);
    }

    inline QDBusPendingReply<QStringList> RegisteredObjects()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("RegisteredObjects"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Broadcast(const QString &message);
};

namespace org {
  typedef ::QTestableProxy qTestable;
}
#endif
